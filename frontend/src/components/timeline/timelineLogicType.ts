// Generated by kea-typegen on Mon, 11 Mar 2024 20:01:05 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { PostData } from './timelineLogic'
import type { Post } from '../post/postLogic'

export interface timelineLogicType extends Logic {
    actionCreators: {
        appendPosts: (newPosts: Post[]) => {
            type: 'append posts (src.components.timeline.timelineLogic)'
            payload: {
                newPosts: Post[]
            }
        }
        loadPosts: () => {
            type: 'load posts (src.components.timeline.timelineLogic)'
            payload: any
        }
        loadPostsSuccess: (
            postMetadata: PostData,
            payload?: any
        ) => {
            type: 'load posts success (src.components.timeline.timelineLogic)'
            payload: {
                postMetadata: PostData
                payload?: any
            }
        }
        loadPostsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load posts failure (src.components.timeline.timelineLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'append posts (src.components.timeline.timelineLogic)': 'appendPosts'
        'load posts (src.components.timeline.timelineLogic)': 'loadPosts'
        'load posts success (src.components.timeline.timelineLogic)': 'loadPostsSuccess'
        'load posts failure (src.components.timeline.timelineLogic)': 'loadPostsFailure'
    }
    actionTypes: {
        appendPosts: 'append posts (src.components.timeline.timelineLogic)'
        loadPosts: 'load posts (src.components.timeline.timelineLogic)'
        loadPostsSuccess: 'load posts success (src.components.timeline.timelineLogic)'
        loadPostsFailure: 'load posts failure (src.components.timeline.timelineLogic)'
    }
    actions: {
        appendPosts: (newPosts: Post[]) => void
        loadPosts: () => void
        loadPostsSuccess: (postMetadata: PostData, payload?: any) => void
        loadPostsFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        appendPosts: (newPosts: Post[]) => Promise<any>
        loadPosts: () => Promise<any>
        loadPostsSuccess: (postMetadata: PostData, payload?: any) => Promise<any>
        loadPostsFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        postMetadata: PostData
        postMetadataLoading: boolean
        posts: Post[]
    }
    events: {}
    key: undefined
    listeners: {}
    path: ['src', 'components', 'timeline', 'timelineLogic']
    pathString: 'src.components.timeline.timelineLogic'
    props: Record<string, unknown>
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        postMetadata: PostData
        postMetadataLoading: boolean
        posts: Post[]
    }
    reducers: {
        postMetadata: (state: PostData, action: any, fullState: any) => PostData
        postMetadataLoading: (state: boolean, action: any, fullState: any) => boolean
        posts: (state: Post[], action: any, fullState: any) => Post[]
    }
    selector: (state: any) => {
        postMetadata: PostData
        postMetadataLoading: boolean
        posts: Post[]
    }
    selectors: {
        postMetadata: (state: any, props?: any) => PostData
        postMetadataLoading: (state: any, props?: any) => boolean
        posts: (state: any, props?: any) => Post[]
    }
    sharedListeners: {}
    values: {
        postMetadata: PostData
        postMetadataLoading: boolean
        posts: Post[]
    }
    _isKea: true
    _isKeaWithKey: false
}
