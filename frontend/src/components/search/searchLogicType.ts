// Generated by kea-typegen on Fri, 22 Mar 2024 02:02:16 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { Feed } from '../feed/feedLogic'

export interface searchLogicType extends Logic {
    actionCreators: {
        loadFeeds: () => {
            type: 'load feeds (src.components.search.searchLogic)'
            payload: any
        }
        loadFeedsSuccess: (
            feeds: Feed[],
            payload?: any
        ) => {
            type: 'load feeds success (src.components.search.searchLogic)'
            payload: {
                feeds: Feed[]
                payload?: any
            }
        }
        loadFeedsFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load feeds failure (src.components.search.searchLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
        loadUsers: () => {
            type: 'load users (src.components.search.searchLogic)'
            payload: any
        }
        loadUsersSuccess: (
            users: Feed[],
            payload?: any
        ) => {
            type: 'load users success (src.components.search.searchLogic)'
            payload: {
                users: Feed[]
                payload?: any
            }
        }
        loadUsersFailure: (
            error: string,
            errorObject?: any
        ) => {
            type: 'load users failure (src.components.search.searchLogic)'
            payload: {
                error: string
                errorObject?: any
            }
        }
    }
    actionKeys: {
        'load feeds (src.components.search.searchLogic)': 'loadFeeds'
        'load feeds success (src.components.search.searchLogic)': 'loadFeedsSuccess'
        'load feeds failure (src.components.search.searchLogic)': 'loadFeedsFailure'
        'load users (src.components.search.searchLogic)': 'loadUsers'
        'load users success (src.components.search.searchLogic)': 'loadUsersSuccess'
        'load users failure (src.components.search.searchLogic)': 'loadUsersFailure'
    }
    actionTypes: {
        loadFeeds: 'load feeds (src.components.search.searchLogic)'
        loadFeedsSuccess: 'load feeds success (src.components.search.searchLogic)'
        loadFeedsFailure: 'load feeds failure (src.components.search.searchLogic)'
        loadUsers: 'load users (src.components.search.searchLogic)'
        loadUsersSuccess: 'load users success (src.components.search.searchLogic)'
        loadUsersFailure: 'load users failure (src.components.search.searchLogic)'
    }
    actions: {
        loadFeeds: () => void
        loadFeedsSuccess: (feeds: Feed[], payload?: any) => void
        loadFeedsFailure: (error: string, errorObject?: any) => void
        loadUsers: () => void
        loadUsersSuccess: (users: Feed[], payload?: any) => void
        loadUsersFailure: (error: string, errorObject?: any) => void
    }
    asyncActions: {
        loadFeeds: () => Promise<any>
        loadFeedsSuccess: (feeds: Feed[], payload?: any) => Promise<any>
        loadFeedsFailure: (error: string, errorObject?: any) => Promise<any>
        loadUsers: () => Promise<any>
        loadUsersSuccess: (users: Feed[], payload?: any) => Promise<any>
        loadUsersFailure: (error: string, errorObject?: any) => Promise<any>
    }
    defaults: {
        feeds: any[]
        users: any[]
        feedsLoading: boolean
        usersLoading: boolean
    }
    events: {}
    key: string
    listeners: {}
    path: ['src', 'components', 'search', 'searchLogic']
    pathString: 'src.components.search.searchLogic'
    props: {
        searchParam?: string
    }
    reducer: (
        state: any,
        action: any,
        fullState: any
    ) => {
        feeds: any[]
        users: any[]
        feedsLoading: boolean
        usersLoading: boolean
    }
    reducers: {
        feeds: (state: any[], action: any, fullState: any) => any[]
        users: (state: any[], action: any, fullState: any) => any[]
        feedsLoading: (state: boolean, action: any, fullState: any) => boolean
        usersLoading: (state: boolean, action: any, fullState: any) => boolean
    }
    selector: (state: any) => {
        feeds: any[]
        users: any[]
        feedsLoading: boolean
        usersLoading: boolean
    }
    selectors: {
        feeds: (state: any, props?: any) => any[]
        users: (state: any, props?: any) => any[]
        feedsLoading: (state: any, props?: any) => boolean
        usersLoading: (state: any, props?: any) => boolean
    }
    sharedListeners: {}
    values: {
        feeds: any[]
        users: any[]
        feedsLoading: boolean
        usersLoading: boolean
    }
    _isKea: true
    _isKeaWithKey: true
}
